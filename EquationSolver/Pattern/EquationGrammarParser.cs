//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/aosamesan/RiderProjects/EquationSolver/EquationSolver/Pattern/EquationGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EquationSolver.Pattern {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class EquationGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, VARIABLE=3, PLUS=4, MINUS=5, ASTER=6, SLASH=7, POWER=8, 
		PERCENT=9, FACTORIAL=10, EULER=11, PI=12, MODULUS=13, SIN=14, COSEC=15, 
		COS=16, SEC=17, TAN=18, COT=19, ARCSIN=20, ARCCSC=21, ARCCOS=22, ARCSEC=23, 
		ARCTAN=24, ARCCOT=25, SINH=26, COSH=27, TANH=28, CSCH=29, SECH=30, COTH=31, 
		ASINH=32, ACOSH=33, ATANH=34, ACSCH=35, ASECH=36, ACOTH=37, LOG10=38, 
		LOG=39, EXP=40, SQRT=41, NUMBER=42, WHITESPACE=43;
	public const int
		RULE_statement = 0, RULE_addition = 1, RULE_modulus = 2, RULE_multiplication = 3, 
		RULE_power_without_percentage = 4, RULE_power = 5, RULE_signed_atom = 6, 
		RULE_atom_without_percentage = 7, RULE_atom = 8, RULE_variable_with_scalar_product = 9, 
		RULE_variable_with_power = 10, RULE_factorial = 11, RULE_percentage = 12, 
		RULE_functional = 13, RULE_function_name = 14, RULE_number = 15, RULE_variable = 16, 
		RULE_constant = 17;
	public static readonly string[] ruleNames = {
		"statement", "addition", "modulus", "multiplication", "power_without_percentage", 
		"power", "signed_atom", "atom_without_percentage", "atom", "variable_with_scalar_product", 
		"variable_with_power", "factorial", "percentage", "functional", "function_name", 
		"number", "variable", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'x'", "'+'", "'-'", null, null, "'^'", "'%'", "'!'", 
		"'e'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "VARIABLE", "PLUS", "MINUS", "ASTER", "SLASH", 
		"POWER", "PERCENT", "FACTORIAL", "EULER", "PI", "MODULUS", "SIN", "COSEC", 
		"COS", "SEC", "TAN", "COT", "ARCSIN", "ARCCSC", "ARCCOS", "ARCSEC", "ARCTAN", 
		"ARCCOT", "SINH", "COSH", "TANH", "CSCH", "SECH", "COTH", "ASINH", "ACOSH", 
		"ATANH", "ACSCH", "ASECH", "ACOTH", "LOG10", "LOG", "EXP", "SQRT", "NUMBER", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EquationGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EquationGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EquationGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EquationGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EquationGrammarParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; addition(0);
			State = 37; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		public IToken op;
		public ModulusContext modulus() {
			return GetRuleContext<ModulusContext>(0);
		}
		public AdditionContext[] addition() {
			return GetRuleContexts<AdditionContext>();
		}
		public AdditionContext addition(int i) {
			return GetRuleContext<AdditionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(EquationGrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EquationGrammarParser.MINUS, 0); }
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		return addition(0);
	}

	private AdditionContext addition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditionContext _localctx = new AdditionContext(Context, _parentState);
		AdditionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_addition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 40; modulus(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_addition);
					State = 42;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 43;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 44; addition(2);
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ModulusContext : ParserRuleContext {
		public IToken op;
		public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		public ModulusContext[] modulus() {
			return GetRuleContexts<ModulusContext>();
		}
		public ModulusContext modulus(int i) {
			return GetRuleContext<ModulusContext>(i);
		}
		public ITerminalNode MODULUS() { return GetToken(EquationGrammarParser.MODULUS, 0); }
		public ITerminalNode PERCENT() { return GetToken(EquationGrammarParser.PERCENT, 0); }
		public ITerminalNode LPAREN() { return GetToken(EquationGrammarParser.LPAREN, 0); }
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(EquationGrammarParser.RPAREN, 0); }
		public ModulusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterModulus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitModulus(this);
		}
	}

	[RuleVersion(0)]
	public ModulusContext modulus() {
		return modulus(0);
	}

	private ModulusContext modulus(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ModulusContext _localctx = new ModulusContext(Context, _parentState);
		ModulusContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_modulus, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 51; multiplication(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new ModulusContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_modulus);
						State = 53;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 54;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PERCENT || _la==MODULUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 55; modulus(3);
						}
						break;
					case 2:
						{
						_localctx = new ModulusContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_modulus);
						State = 56;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 57;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PERCENT || _la==MODULUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 58; Match(LPAREN);
						State = 59; addition(0);
						State = 60; Match(RPAREN);
						}
						break;
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		public IToken op;
		public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(EquationGrammarParser.LPAREN, 0); }
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(EquationGrammarParser.RPAREN, 0); }
		public MultiplicationContext[] multiplication() {
			return GetRuleContexts<MultiplicationContext>();
		}
		public MultiplicationContext multiplication(int i) {
			return GetRuleContext<MultiplicationContext>(i);
		}
		public ITerminalNode ASTER() { return GetToken(EquationGrammarParser.ASTER, 0); }
		public ITerminalNode SLASH() { return GetToken(EquationGrammarParser.SLASH, 0); }
		public Power_without_percentageContext power_without_percentage() {
			return GetRuleContext<Power_without_percentageContext>(0);
		}
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		return multiplication(0);
	}

	private MultiplicationContext multiplication(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicationContext _localctx = new MultiplicationContext(Context, _parentState);
		MultiplicationContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_multiplication, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 68; power(0);
				}
				break;
			case 2:
				{
				State = 69; signed_atom();
				}
				break;
			case 3:
				{
				State = 70; Match(LPAREN);
				State = 71; addition(0);
				State = 72; Match(RPAREN);
				State = 73; multiplication(2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 82;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplication);
						State = 77;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 78;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTER || _la==SLASH) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 79; multiplication(4);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplication);
						State = 80;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 81; power_without_percentage(0);
						}
						break;
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Power_without_percentageContext : ParserRuleContext {
		public IToken op;
		public Atom_without_percentageContext atom_without_percentage() {
			return GetRuleContext<Atom_without_percentageContext>(0);
		}
		public Power_without_percentageContext power_without_percentage() {
			return GetRuleContext<Power_without_percentageContext>(0);
		}
		public ITerminalNode POWER() { return GetToken(EquationGrammarParser.POWER, 0); }
		public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public Power_without_percentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_without_percentage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterPower_without_percentage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitPower_without_percentage(this);
		}
	}

	[RuleVersion(0)]
	public Power_without_percentageContext power_without_percentage() {
		return power_without_percentage(0);
	}

	private Power_without_percentageContext power_without_percentage(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Power_without_percentageContext _localctx = new Power_without_percentageContext(Context, _parentState);
		Power_without_percentageContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_power_without_percentage, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 88; atom_without_percentage();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Power_without_percentageContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_power_without_percentage);
					State = 90;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 91; _localctx.op = Match(POWER);
					State = 94;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LPAREN:
					case VARIABLE:
					case SIN:
					case COSEC:
					case COS:
					case SEC:
					case TAN:
					case COT:
					case ARCSIN:
					case ARCCSC:
					case ARCCOS:
					case ARCSEC:
					case ARCTAN:
					case ARCCOT:
					case SINH:
					case COSH:
					case TANH:
					case CSCH:
					case SECH:
					case COTH:
					case ASINH:
					case ACOSH:
					case ATANH:
					case ACSCH:
					case ASECH:
					case ACOTH:
					case LOG10:
					case LOG:
					case EXP:
					case SQRT:
					case NUMBER:
						{
						State = 92; power(0);
						}
						break;
					case PLUS:
					case MINUS:
						{
						State = 93; signed_atom();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		public IToken op;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public PowerContext[] power() {
			return GetRuleContexts<PowerContext>();
		}
		public PowerContext power(int i) {
			return GetRuleContext<PowerContext>(i);
		}
		public ITerminalNode POWER() { return GetToken(EquationGrammarParser.POWER, 0); }
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		return power(0);
	}

	private PowerContext power(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PowerContext _localctx = new PowerContext(Context, _parentState);
		PowerContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_power, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 102; atom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PowerContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_power);
					State = 104;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 105; _localctx.op = Match(POWER);
					State = 108;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LPAREN:
					case VARIABLE:
					case SIN:
					case COSEC:
					case COS:
					case SEC:
					case TAN:
					case COT:
					case ARCSIN:
					case ARCCSC:
					case ARCCOS:
					case ARCSEC:
					case ARCTAN:
					case ARCCOT:
					case SINH:
					case COSH:
					case TANH:
					case CSCH:
					case SECH:
					case COTH:
					case ASINH:
					case ACOSH:
					case ATANH:
					case ACSCH:
					case ASECH:
					case ACOTH:
					case LOG10:
					case LOG:
					case EXP:
					case SQRT:
					case NUMBER:
						{
						State = 106; power(0);
						}
						break;
					case PLUS:
					case MINUS:
						{
						State = 107; signed_atom();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Signed_atomContext : ParserRuleContext {
		public IToken sign;
		public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(EquationGrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EquationGrammarParser.MINUS, 0); }
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(EquationGrammarParser.LPAREN, 0); }
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(EquationGrammarParser.RPAREN, 0); }
		public Signed_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterSigned_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitSigned_atom(this);
		}
	}

	[RuleVersion(0)]
	public Signed_atomContext signed_atom() {
		Signed_atomContext _localctx = new Signed_atomContext(Context, State);
		EnterRule(_localctx, 12, RULE_signed_atom);
		int _la;
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 116; power(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 118; signed_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 120; Match(LPAREN);
				State = 121; addition(0);
				State = 122; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_without_percentageContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionalContext functional() {
			return GetRuleContext<FunctionalContext>(0);
		}
		public Variable_with_scalar_productContext variable_with_scalar_product() {
			return GetRuleContext<Variable_with_scalar_productContext>(0);
		}
		public Variable_with_powerContext variable_with_power() {
			return GetRuleContext<Variable_with_powerContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(EquationGrammarParser.LPAREN, 0); }
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(EquationGrammarParser.RPAREN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public FactorialContext factorial() {
			return GetRuleContext<FactorialContext>(0);
		}
		public Atom_without_percentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_without_percentage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterAtom_without_percentage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitAtom_without_percentage(this);
		}
	}

	[RuleVersion(0)]
	public Atom_without_percentageContext atom_without_percentage() {
		Atom_without_percentageContext _localctx = new Atom_without_percentageContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom_without_percentage);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; functional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; variable_with_scalar_product();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; variable_with_power();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 130; Match(LPAREN);
				State = 131; addition(0);
				State = 132; Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 134; atom(0);
				State = 135; factorial();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FunctionalContext functional() {
			return GetRuleContext<FunctionalContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Variable_with_scalar_productContext variable_with_scalar_product() {
			return GetRuleContext<Variable_with_scalar_productContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(EquationGrammarParser.LPAREN, 0); }
		public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(EquationGrammarParser.RPAREN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public FactorialContext factorial() {
			return GetRuleContext<FactorialContext>(0);
		}
		public PercentageContext percentage() {
			return GetRuleContext<PercentageContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		return atom(0);
	}

	private AtomContext atom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AtomContext _localctx = new AtomContext(Context, _parentState);
		AtomContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_atom, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 140; number();
				}
				break;
			case 2:
				{
				State = 141; functional();
				}
				break;
			case 3:
				{
				State = 142; variable();
				}
				break;
			case 4:
				{
				State = 143; variable_with_scalar_product();
				}
				break;
			case 5:
				{
				State = 144; Match(LPAREN);
				State = 145; addition(0);
				State = 146; Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 154;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new AtomContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_atom);
						State = 150;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 151; factorial();
						}
						break;
					case 2:
						{
						_localctx = new AtomContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_atom);
						State = 152;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 153; percentage();
						}
						break;
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variable_with_scalar_productContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Variable_with_scalar_productContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_with_scalar_product; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterVariable_with_scalar_product(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitVariable_with_scalar_product(this);
		}
	}

	[RuleVersion(0)]
	public Variable_with_scalar_productContext variable_with_scalar_product() {
		Variable_with_scalar_productContext _localctx = new Variable_with_scalar_productContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable_with_scalar_product);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; number();
			State = 160; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_with_powerContext : ParserRuleContext {
		public IToken sign;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode POWER() { return GetToken(EquationGrammarParser.POWER, 0); }
		public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public Variable_with_powerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_with_power; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterVariable_with_power(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitVariable_with_power(this);
		}
	}

	[RuleVersion(0)]
	public Variable_with_powerContext variable_with_power() {
		Variable_with_powerContext _localctx = new Variable_with_powerContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable_with_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; variable();
			State = 163; _localctx.sign = Match(POWER);
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case VARIABLE:
			case SIN:
			case COSEC:
			case COS:
			case SEC:
			case TAN:
			case COT:
			case ARCSIN:
			case ARCCSC:
			case ARCCOS:
			case ARCSEC:
			case ARCTAN:
			case ARCCOT:
			case SINH:
			case COSH:
			case TANH:
			case CSCH:
			case SECH:
			case COTH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case ACSCH:
			case ASECH:
			case ACOTH:
			case LOG10:
			case LOG:
			case EXP:
			case SQRT:
			case NUMBER:
				{
				State = 164; power(0);
				}
				break;
			case PLUS:
			case MINUS:
				{
				State = 165; signed_atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorialContext : ParserRuleContext {
		public ITerminalNode FACTORIAL() { return GetToken(EquationGrammarParser.FACTORIAL, 0); }
		public FactorialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorial; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterFactorial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitFactorial(this);
		}
	}

	[RuleVersion(0)]
	public FactorialContext factorial() {
		FactorialContext _localctx = new FactorialContext(Context, State);
		EnterRule(_localctx, 22, RULE_factorial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(FACTORIAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentageContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(EquationGrammarParser.PERCENT, 0); }
		public PercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percentage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterPercentage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitPercentage(this);
		}
	}

	[RuleVersion(0)]
	public PercentageContext percentage() {
		PercentageContext _localctx = new PercentageContext(Context, State);
		EnterRule(_localctx, 24, RULE_percentage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(PERCENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public FunctionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterFunctional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitFunctional(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalContext functional() {
		FunctionalContext _localctx = new FunctionalContext(Context, State);
		EnterRule(_localctx, 26, RULE_functional);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; function_name();
				State = 173; atom(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; function_name();
				State = 176; signed_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode SQRT() { return GetToken(EquationGrammarParser.SQRT, 0); }
		public ITerminalNode SIN() { return GetToken(EquationGrammarParser.SIN, 0); }
		public ITerminalNode COS() { return GetToken(EquationGrammarParser.COS, 0); }
		public ITerminalNode TAN() { return GetToken(EquationGrammarParser.TAN, 0); }
		public ITerminalNode COSEC() { return GetToken(EquationGrammarParser.COSEC, 0); }
		public ITerminalNode SEC() { return GetToken(EquationGrammarParser.SEC, 0); }
		public ITerminalNode COT() { return GetToken(EquationGrammarParser.COT, 0); }
		public ITerminalNode ARCSIN() { return GetToken(EquationGrammarParser.ARCSIN, 0); }
		public ITerminalNode ARCCOS() { return GetToken(EquationGrammarParser.ARCCOS, 0); }
		public ITerminalNode ARCTAN() { return GetToken(EquationGrammarParser.ARCTAN, 0); }
		public ITerminalNode ARCCSC() { return GetToken(EquationGrammarParser.ARCCSC, 0); }
		public ITerminalNode ARCSEC() { return GetToken(EquationGrammarParser.ARCSEC, 0); }
		public ITerminalNode ARCCOT() { return GetToken(EquationGrammarParser.ARCCOT, 0); }
		public ITerminalNode SINH() { return GetToken(EquationGrammarParser.SINH, 0); }
		public ITerminalNode COSH() { return GetToken(EquationGrammarParser.COSH, 0); }
		public ITerminalNode TANH() { return GetToken(EquationGrammarParser.TANH, 0); }
		public ITerminalNode CSCH() { return GetToken(EquationGrammarParser.CSCH, 0); }
		public ITerminalNode SECH() { return GetToken(EquationGrammarParser.SECH, 0); }
		public ITerminalNode COTH() { return GetToken(EquationGrammarParser.COTH, 0); }
		public ITerminalNode ASINH() { return GetToken(EquationGrammarParser.ASINH, 0); }
		public ITerminalNode ACOSH() { return GetToken(EquationGrammarParser.ACOSH, 0); }
		public ITerminalNode ATANH() { return GetToken(EquationGrammarParser.ATANH, 0); }
		public ITerminalNode ACSCH() { return GetToken(EquationGrammarParser.ACSCH, 0); }
		public ITerminalNode ASECH() { return GetToken(EquationGrammarParser.ASECH, 0); }
		public ITerminalNode ACOTH() { return GetToken(EquationGrammarParser.ACOTH, 0); }
		public ITerminalNode LOG() { return GetToken(EquationGrammarParser.LOG, 0); }
		public ITerminalNode LOG10() { return GetToken(EquationGrammarParser.LOG10, 0); }
		public ITerminalNode EXP() { return GetToken(EquationGrammarParser.EXP, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COSEC) | (1L << COS) | (1L << SEC) | (1L << TAN) | (1L << COT) | (1L << ARCSIN) | (1L << ARCCSC) | (1L << ARCCOS) | (1L << ARCSEC) | (1L << ARCTAN) | (1L << ARCCOT) | (1L << SINH) | (1L << COSH) | (1L << TANH) | (1L << CSCH) | (1L << SECH) | (1L << COTH) | (1L << ASINH) | (1L << ACOSH) | (1L << ATANH) | (1L << ACSCH) | (1L << ASECH) | (1L << ACOTH) | (1L << LOG10) | (1L << LOG) | (1L << EXP) | (1L << SQRT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(EquationGrammarParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 30, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(EquationGrammarParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 32, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode PI() { return GetToken(EquationGrammarParser.PI, 0); }
		public ITerminalNode EULER() { return GetToken(EquationGrammarParser.EULER, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEquationGrammarListener typedListener = listener as IEquationGrammarListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 34, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = TokenStream.LA(1);
			if ( !(_la==EULER || _la==PI) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return addition_sempred((AdditionContext)_localctx, predIndex);
		case 2: return modulus_sempred((ModulusContext)_localctx, predIndex);
		case 3: return multiplication_sempred((MultiplicationContext)_localctx, predIndex);
		case 4: return power_without_percentage_sempred((Power_without_percentageContext)_localctx, predIndex);
		case 5: return power_sempred((PowerContext)_localctx, predIndex);
		case 8: return atom_sempred((AtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool addition_sempred(AdditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool modulus_sempred(ModulusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplication_sempred(MultiplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool power_without_percentage_sempred(Power_without_percentageContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool power_sempred(PowerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool atom_sempred(AtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\xBF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x30', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x33', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x41', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x44', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'N', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'U', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'X', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x61', '\n', '\x6', '\a', '\x6', '\x63', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x66', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'o', '\n', '\a', 
		'\a', '\a', 'q', '\n', '\a', '\f', '\a', '\xE', '\a', 't', '\v', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x7F', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x8C', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x97', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x9D', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xA0', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA9', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xB5', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x2', '\b', '\x4', '\x6', '\b', '\n', '\f', 
		'\x12', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'\x2', '\a', '\x3', '\x2', '\x6', '\a', '\x4', '\x2', '\v', '\v', '\xF', 
		'\xF', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\x10', '+', '\x3', '\x2', 
		'\r', '\xE', '\x2', '\xC6', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'M', '\x3', '\x2', '\x2', '\x2', '\n', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'g', '\x3', '\x2', '\x2', '\x2', '\xE', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x12', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xB8', '\x3', '\x2', '\x2', '\x2', '\"', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xBC', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', '\x4', 
		'\x3', '\x2', '\'', '(', '\a', '\x2', '\x2', '\x3', '(', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\b', '\x3', '\x1', '\x2', '*', '+', '\x5', 
		'\x6', '\x4', '\x2', '+', '\x31', '\x3', '\x2', '\x2', '\x2', ',', '-', 
		'\f', '\x3', '\x2', '\x2', '-', '.', '\t', '\x2', '\x2', '\x2', '.', '\x30', 
		'\x5', '\x4', '\x3', '\x4', '/', ',', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\b', '\x4', '\x1', '\x2', '\x35', '\x36', '\x5', '\b', '\x5', 
		'\x2', '\x36', '\x42', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\f', 
		'\x4', '\x2', '\x2', '\x38', '\x39', '\t', '\x3', '\x2', '\x2', '\x39', 
		'\x41', '\x5', '\x6', '\x4', '\x5', ':', ';', '\f', '\x3', '\x2', '\x2', 
		';', '<', '\t', '\x3', '\x2', '\x2', '<', '=', '\a', '\x3', '\x2', '\x2', 
		'=', '>', '\x5', '\x4', '\x3', '\x2', '>', '?', '\a', '\x4', '\x2', '\x2', 
		'?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '@', ':', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\b', '\x5', 
		'\x1', '\x2', '\x46', 'N', '\x5', '\f', '\a', '\x2', 'G', 'N', '\x5', 
		'\xE', '\b', '\x2', 'H', 'I', '\a', '\x3', '\x2', '\x2', 'I', 'J', '\x5', 
		'\x4', '\x3', '\x2', 'J', 'K', '\a', '\x4', '\x2', '\x2', 'K', 'L', '\x5', 
		'\b', '\x5', '\x4', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'G', '\x3', '\x2', '\x2', '\x2', 'M', 
		'H', '\x3', '\x2', '\x2', '\x2', 'N', 'V', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\f', '\x5', '\x2', '\x2', 'P', 'Q', '\t', '\x4', '\x2', '\x2', 
		'Q', 'U', '\x5', '\b', '\x5', '\x6', 'R', 'S', '\f', '\x3', '\x2', '\x2', 
		'S', 'U', '\x5', '\n', '\x6', '\x2', 'T', 'O', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', '\t', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\b', '\x6', '\x1', '\x2', 'Z', '[', '\x5', '\x10', '\t', 
		'\x2', '[', '\x64', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\f', '\x3', 
		'\x2', '\x2', ']', '`', '\a', '\n', '\x2', '\x2', '^', '\x61', '\x5', 
		'\f', '\a', '\x2', '_', '\x61', '\x5', '\xE', '\b', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\b', '\a', '\x1', '\x2', 'h', 'i', '\x5', '\x12', '\n', '\x2', 
		'i', 'r', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\f', '\x3', '\x2', '\x2', 
		'k', 'n', '\a', '\n', '\x2', '\x2', 'l', 'o', '\x5', '\f', '\a', '\x2', 
		'm', 'o', '\x5', '\xE', '\b', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 
		'p', 'j', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', '\r', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\t', '\x2', '\x2', '\x2', 'v', '\x7F', '\x5', '\f', 
		'\a', '\x2', 'w', 'x', '\t', '\x2', '\x2', '\x2', 'x', '\x7F', '\x5', 
		'\xE', '\b', '\x2', 'y', 'z', '\t', '\x2', '\x2', '\x2', 'z', '{', '\a', 
		'\x3', '\x2', '\x2', '{', '|', '\x5', '\x4', '\x3', '\x2', '|', '}', '\a', 
		'\x4', '\x2', '\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', 'u', 
		'\x3', '\x2', '\x2', '\x2', '~', 'w', '\x3', '\x2', '\x2', '\x2', '~', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x7F', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x8C', '\x5', '$', '\x13', '\x2', '\x81', '\x8C', '\x5', '\x1C', 
		'\xF', '\x2', '\x82', '\x8C', '\x5', '\x14', '\v', '\x2', '\x83', '\x8C', 
		'\x5', '\x16', '\f', '\x2', '\x84', '\x85', '\a', '\x3', '\x2', '\x2', 
		'\x85', '\x86', '\x5', '\x4', '\x3', '\x2', '\x86', '\x87', '\a', '\x4', 
		'\x2', '\x2', '\x87', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\x5', '\x12', '\n', '\x2', '\x89', '\x8A', '\x5', '\x18', '\r', '\x2', 
		'\x8A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\b', '\n', '\x1', '\x2', '\x8E', '\x97', '\x5', ' ', '\x11', '\x2', '\x8F', 
		'\x97', '\x5', '\x1C', '\xF', '\x2', '\x90', '\x97', '\x5', '\"', '\x12', 
		'\x2', '\x91', '\x97', '\x5', '\x14', '\v', '\x2', '\x92', '\x93', '\a', 
		'\x3', '\x2', '\x2', '\x93', '\x94', '\x5', '\x4', '\x3', '\x2', '\x94', 
		'\x95', '\a', '\x4', '\x2', '\x2', '\x95', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x96', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x90', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x96', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\f', 
		'\x4', '\x2', '\x2', '\x99', '\x9D', '\x5', '\x18', '\r', '\x2', '\x9A', 
		'\x9B', '\f', '\x3', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\x1A', '\xE', 
		'\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA2', '\x5', ' ', '\x11', '\x2', '\xA2', 
		'\xA3', '\x5', '\"', '\x12', '\x2', '\xA3', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x5', '\"', '\x12', '\x2', '\xA5', '\xA8', '\a', 
		'\n', '\x2', '\x2', '\xA6', '\xA9', '\x5', '\f', '\a', '\x2', '\xA7', 
		'\xA9', '\x5', '\xE', '\b', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\f', '\x2', '\x2', '\xAB', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\v', '\x2', 
		'\x2', '\xAD', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x5', 
		'\x1E', '\x10', '\x2', '\xAF', '\xB0', '\x5', '\x12', '\n', '\x2', '\xB0', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x1E', '\x10', 
		'\x2', '\xB2', '\xB3', '\x5', '\xE', '\b', '\x2', '\xB3', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\t', '\x5', '\x2', '\x2', '\xB7', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', ',', '\x2', '\x2', '\xB9', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x5', '\x2', '\x2', 
		'\xBB', '#', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\t', '\x6', 
		'\x2', '\x2', '\xBD', '%', '\x3', '\x2', '\x2', '\x2', '\x13', '\x31', 
		'@', '\x42', 'M', 'T', 'V', '`', '\x64', 'n', 'r', '~', '\x8B', '\x96', 
		'\x9C', '\x9E', '\xA8', '\xB4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace EquationSolver.Pattern
