//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/aosamesan/RiderProjects/EquationSolver/EquationSolver/Pattern/EquationGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EquationSolver.Pattern {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="EquationGrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IEquationGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] EquationGrammarParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] EquationGrammarParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.addition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddition([NotNull] EquationGrammarParser.AdditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.addition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddition([NotNull] EquationGrammarParser.AdditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.modulus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModulus([NotNull] EquationGrammarParser.ModulusContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.modulus"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModulus([NotNull] EquationGrammarParser.ModulusContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.multiplication"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplication([NotNull] EquationGrammarParser.MultiplicationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.multiplication"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplication([NotNull] EquationGrammarParser.MultiplicationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.power_without_percentage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPower_without_percentage([NotNull] EquationGrammarParser.Power_without_percentageContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.power_without_percentage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPower_without_percentage([NotNull] EquationGrammarParser.Power_without_percentageContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPower([NotNull] EquationGrammarParser.PowerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPower([NotNull] EquationGrammarParser.PowerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.signed_atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSigned_atom([NotNull] EquationGrammarParser.Signed_atomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.signed_atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSigned_atom([NotNull] EquationGrammarParser.Signed_atomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.atom_without_percentage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_without_percentage([NotNull] EquationGrammarParser.Atom_without_percentageContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.atom_without_percentage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_without_percentage([NotNull] EquationGrammarParser.Atom_without_percentageContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] EquationGrammarParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] EquationGrammarParser.AtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.variable_with_scalar_product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_with_scalar_product([NotNull] EquationGrammarParser.Variable_with_scalar_productContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.variable_with_scalar_product"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_with_scalar_product([NotNull] EquationGrammarParser.Variable_with_scalar_productContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.variable_with_power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_with_power([NotNull] EquationGrammarParser.Variable_with_powerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.variable_with_power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_with_power([NotNull] EquationGrammarParser.Variable_with_powerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.factorial"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorial([NotNull] EquationGrammarParser.FactorialContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.factorial"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorial([NotNull] EquationGrammarParser.FactorialContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.percentage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPercentage([NotNull] EquationGrammarParser.PercentageContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.percentage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPercentage([NotNull] EquationGrammarParser.PercentageContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.functional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctional([NotNull] EquationGrammarParser.FunctionalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.functional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctional([NotNull] EquationGrammarParser.FunctionalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_name([NotNull] EquationGrammarParser.Function_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_name([NotNull] EquationGrammarParser.Function_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] EquationGrammarParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] EquationGrammarParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] EquationGrammarParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] EquationGrammarParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EquationGrammarParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] EquationGrammarParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EquationGrammarParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] EquationGrammarParser.ConstantContext context);
}
} // namespace EquationSolver.Pattern
